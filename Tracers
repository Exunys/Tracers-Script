--[[


		██╗░░░██╗██████╗░██╗░█████╗░░█████╗░░██████╗████████╗
		██║░░░██║██╔══██╗██║██╔══██╗██╔══██╗██╔════╝╚══██╔══╝
		██║░░░██║██████╦╝██║██║░░╚═╝███████║╚█████╗░░░░██║░░░
		██║░░░██║██╔══██╗██║██║░░██╗██╔══██║░╚═══██╗░░░██║░░░
		╚██████╔╝██████╦╝██║╚█████╔╝██║░░██║██████╔╝░░░██║░░░
		░╚═════╝░╚═════╝░╚═╝░╚════╝░╚═╝░░╚═╝╚═════╝░░░░╚═╝░░░


-- \\ ^ Developer Notes ^ // --

- The more you execute the script, the laggier the game gets.

- [~] The script can be executed by changing the modes, making the tracers visible / invisible and by executing the script again from your executor.

- I decided to make this script unobfuscated so that people can learn by reading and experimenting with the source code this script.

- This script has comments everywhere so that the user experimenting with the script can learn something.

- This tracer script was made by Ubicast, report bugs / glitches on my discord Aleksandar#2880

- More information about Ubicast : https://github.com/UbicastDev

- You can freely change any of the properties below to suit your needs.

  [?] (1 - Name, 2 - Value Type, 3 - Role Name, 4 - Example)

  [#] Changable properties :
   1. Thickness <int> [TracerThickness]          - 1, 2, 3...
   2. Color <Color3> [TracerColor]               - Color3.fromRGB(x, x, x)
   3. Transparency <int> [TracerTransparency]    - 1, 2, 3...
   4. Visible <bool> [TracersVisible]            - true / false
   5. Team Check <bool> [TeamCheck]              - true / false
   6. From Bottom <bool> [FromBottom]            - true / false
   7. From Center <bool> [FromCenter]            - true / false
   8. From Mouse <bool> [FromMouse]              - true / false
   9. Mode Skip Key <enum> [ModeSkipKey]         - Enum.KeyCode.(Key)
   10. Disable Key <enum> [DisableKey]           - Enum.KeyCode.(Key)

- [!] This script remains undetected and has been tested on games with an Anti-Cheat system.

- [!] This script works on Synapse X & ProtoSmasher. (Not tested on other exploits but if the drawing library api is called by "Drawing" then it should work)

]]

--<===========>SCRIPT<===========>--

--// Local variables

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Camera = game:GetService("Workspace").CurrentCamera
local UserInputService = game:GetService("UserInputService")

--// Global variables

_G.TeamCheck = false   -- If set to true then the script would create tracers only for the enemy team members.

--[!]-- ONLY ONE OF THESE VALUES SHOULD BE SET TO TRUE TO NOT ERROR THE SCRIPT --[!]--

_G.FromCenter = false  -- If set to true, the tracers will come from the center of your screen.
_G.FromBottom = true   -- If set to true, the tracers will come from the bottom of your screen.
_G.FromMouse = false   -- If set to true, the tracers will come from the position of your mouse curson on your screen.

_G.TracersVisible = true   -- If set to true then the tracers will be visible and vice versa.
_G.TracerColor = Color3.fromRGB(40, 90, 255)   -- The color that the tracers would appear as.
_G.TracerThickness = 1   -- The thickness of the tracers.
_G.TracerTransparency = 1   -- The transparency of the tracers.

_G.ModeSkipKey = Enum.KeyCode.E   -- The key that changes between modes that indicate where will the tracers come from.
_G.DisableKey = Enum.KeyCode.Q   -- The key that disables / enables the tracers.

--// The main part of the script wrapped in a function waiting to get called.

local function CreateTracers()
    for _, v in pairs(Players:GetPlayers()) do -- Goes through all of the players 1 by 1 that are currently playing the game.
        if v.Name ~= game.Players.LocalPlayer.Name and workspace[v.Name] ~= nil and workspace[v.Name].HumanoidRootPart ~= nil then -- If the script finds the player's character and the character is not your character then it continues.
            local Vector, OnScreen = Camera:WorldToScreenPoint(workspace[v.Name].HumanoidRootPart.Position) -- Used to calculate where the person being traced is on your screen. (Vector)
            
            --// Creates the tracer / creates a line that will be used to trace a player.

            local TracerLine = Drawing.new("Line")
            TracerLine.Visible = true
            TracerLine.Thickness = _G.TracerThickness
            TracerLine.Transparency = _G.TracerTransparency
            TracerLine.Color = _G.TracerColor
    
            RunService.RenderStepped:Connect(function() -- Executes after every frame that your computer rendered. (This depends on your FPS - Frames Per Second)
                if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                    local Vector, OnScreen = Camera:WorldToScreenPoint(workspace[v.Name].HumanoidRootPart.Position)
                    
                    if _G.TeamCheck == true then -- Checks if the global variable TeamCheck is set to true.
                        if Players[Player.Name].Team ~= Players.LocalPlayer.Team then -- If the player isn't on your team then it continues forward.
                            
                            -- // Checks where the tracer is suppose to come from.

                            if _G.FromMouse == true and _G.FromCenter == false and _G.FromBottom == false then
                                TracerLine.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
                            elseif _G.FromMouse == false and _G.FromCenter == true and _G.FromBottom == false then
                                TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                            elseif _G.FromMouse == false and _G.FromCenter == false and _G.FromBottom == true then
                                TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                            end
            
                            --// Checks if the player can be seen / found on your screen.

                            if OnScreen == true and _G.TracersVisible == true then
                                TracerLine.To = Vector2.new(Vector.X, Vector.Y)
                                TracerLine.Visible = true
                            else
                                TracerLine.Visible = false
                            end
                        end
                    elseif _G.TeamCheck == false then -- If the global variable TeamCheck is set to false then it continues forward.
                       
                        -- // Checks where the tracer is suppose to come from.

                        if _G.FromMouse == true and _G.FromCenter == false and _G.FromBottom == false then
                            TracerLine.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
                        elseif _G.FromMouse == false and _G.FromCenter == true and _G.FromBottom == false then
                            TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                        elseif _G.FromMouse == false and _G.FromCenter == false and _G.FromBottom == true then
                            TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                        end
        
                        --// Checks if the player can be seen / found on your screen.

                        if OnScreen == true and _G.TracersVisible == true then
                            TracerLine.To = Vector2.new(Vector.X, Vector.Y)
                            TracerLine.Visible = true
                        else
                            TracerLine.Visible = false
                        end 
                    end
                end
            end)
    
            Players.PlayerAdded:Connect(function(Player) -- Executes when a player joins the game.
                Players[Player.Name].CharacterAdded:Connect(function() -- Executes once the player's character is created and added to Workspace.
                    repeat wait() until workspace:FindFirstChild(Player.Name).HumanoidRootPart ~= nil -- Stops the code until the character's HumanoidRootPart is fully loaded / there.
        
                    local Vector, OnScreen = Camera:WorldToScreenPoint(workspace[Player.Name].HumanoidRootPart.Position)
                    local TracerLine = Drawing.new("Line")
                    TracerLine.Visible = true
                    TracerLine.Thickness = _G.TracerThickness
                    TracerLine.Transparency = _G.TracerTransparency
                    TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                    TracerLine.To = Vector2.new(Vector.X, Vector.Y)
                    TracerLine.Color = _G.TracerColor
            
                    RunService.RenderStepped:Connect(function()
                        if workspace:FindFirstChild(Player.Name) ~= nil and workspace[Player.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                            local Vector, OnScreen = Camera:WorldToScreenPoint(workspace[Player.Name].HumanoidRootPart.Position)
                            
                            if _G.TeamCheck == true then
                                if Players[Player.Name].Team ~= Players.LocalPlayer.Team then 
                                    if _G.FromMouse == true and _G.FromCenter == false and _G.FromBottom == false then
                                        TracerLine.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
                                    elseif _G.FromMouse == false and _G.FromCenter == true and _G.FromBottom == false then
                                        TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                                    elseif _G.FromMouse == false and _G.FromCenter == false and _G.FromBottom == true then
                                        TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                                    end
                    
                                    if OnScreen == true and _G.TracersVisible == true then
                                        TracerLine.To = Vector2.new(Vector.X, Vector.Y)
                                        TracerLine.Visible = true
                                    else
                                        TracerLine.Visible = false
                                    end
                                end
                            elseif _G.TeamCheck == false then
                                if _G.FromMouse == true and _G.FromCenter == false and _G.FromBottom == false then
                                    TracerLine.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
                                elseif _G.FromMouse == false and _G.FromCenter == true and _G.FromBottom == false then
                                    TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                                elseif _G.FromMouse == false and _G.FromCenter == false and _G.FromBottom == true then
                                    TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                                end
                
                                if OnScreen == true and _G.TracersVisible == true then
                                    TracerLine.To = Vector2.new(Vector.X, Vector.Y)
                                    TracerLine.Visible = true
                                else
                                    TracerLine.Visible = false
                                end 
                            end
                        end
                    end)
                end)
            end)
        end
    end
end

--// Checks for if you pressed one of the keys that play a role in the script - if so, then the script activates.

UserInputService.InputBegan:Connect(function(Input)
    if Input.KeyCode == _G.ModeSkipKey then
        if _G.FromMouse == true and _G.FromCenter == false and _G.FromBottom == false then
            _G.FromCenter = false
            _G.FromBottom = true
            _G.FromMouse = false
            CreateTracers()

            game:GetService("StarterGui"):SetCore("SendNotification",{
                Title = "Ubicast Developer";
                Text = "Tracers will be now coming from the bottom of your screen (Mode 1)";
                Duration = 5;
            })
        elseif _G.FromMouse == false and _G.FromCenter == false and _G.FromBottom == true then
            _G.FromCenter = true
            _G.FromBottom = false
            _G.FromMouse = false
            CreateTracers()

            game:GetService("StarterGui"):SetCore("SendNotification",{
                Title = "Ubicast Developer";
                Text = "Tracers will be now coming from the center of your screen (Mode 2)";
                Duration = 5;
            })
        elseif _G.FromMouse == false and _G.FromCenter == true and _G.FromBottom == false then
            _G.FromCenter = false
            _G.FromBottom = false
            _G.FromMouse = true
            CreateTracers()

            game:GetService("StarterGui"):SetCore("SendNotification",{
                Title = "Ubicast Developer";
                Text = "Tracers will be now coming from the position of your mouse cursor on your screen (Mode 3)";
                Duration = 5;
            })
        end
    elseif Input.KeyCode == _G.DisableKey then 
        _G.TracersVisible = not _G.TracersVisible
        CreateTracers()
    end
end)

CreateTracers() -- Calls the function CreateTracers which creates the tracers.

--// Informs the user that the script has loaded with no errors right after the script executes.

game:GetService("StarterGui"):SetCore("SendNotification",{
    Title = "Ubicast Developer";
    Text = "Tracer script has successfully loaded.";
    Duration = 5;
})

--<==============================>--
