--[[


		██╗░░░██╗██████╗░██╗░█████╗░░█████╗░░██████╗████████╗
		██║░░░██║██╔══██╗██║██╔══██╗██╔══██╗██╔════╝╚══██╔══╝
		██║░░░██║██████╦╝██║██║░░╚═╝███████║╚█████╗░░░░██║░░░
		██║░░░██║██╔══██╗██║██║░░██╗██╔══██║░╚═══██╗░░░██║░░░
		╚██████╔╝██████╦╝██║╚█████╔╝██║░░██║██████╔╝░░░██║░░░
		░╚═════╝░╚═════╝░╚═╝░╚════╝░╚═╝░░╚═╝╚═════╝░░░░╚═╝░░░


-- \\ ^ Developer Notes ^ // --

- I decided to make this script unobfuscated so that people can learn by reading and experimenting with the source code of this script.

- This script has comments everywhere so that the user experimenting with the script can learn something.

- This tracer script was made by Ubicast, to find contact information about me please visit the link below.

- More information about Ubicast : https://github.com/UbicastDev

- You can freely change any of the properties below to suit your needs.

  [?] (1 - Name, 2 - Value Type, 3 - Role Name, 4 - Example)

  [#] Changable properties :
   1. Thickness <int> [TracerThickness]                             - 1, 2, 3...
   2. Color <Color3> [TracerColor]                                  - Color3.fromRGB(x, x, x)
   3. Transparency <int> [TracerTransparency]                       - 1, 2, 3...
   4. Visible <bool> [TracersVisible]                               - true / false
   5. Team Check <bool> [TeamCheck]                                 - true / false
   6. From Bottom <bool> [FromBottom]                               - true / false
   7. From Center <bool> [FromCenter]                               - true / false
   8. From Mouse <bool> [FromMouse]                                 - true / false
   9. Visible When Not In Sight <bool> [VisibleWhenNotInSight]      - true / false
   10. Default Settings <bool> [DefaultSettings]                    - true / false
   11. Send Notifications <bool> [SendNotifications]                - true / false
   12. Mode Skip Key <enum> [ModeSkipKey]                           - Enum.KeyCode.(Key)
   13. Disable Key <enum> [DisableKey]                              - Enum.KeyCode.(Key)

- [!] This script remains undetected and has been tested on games with an Anti-Cheat system.

- [!] This script only works on exploits that support the API refrence Drawing.

]]

--<========================================================>SCRIPT<========================================================>--

--// Checks if your exploit is supported.

local function API_Check()
    if Drawing == nil then
        return "No" -- Returns "No" meaning that the exploit is not supported.
    else
        return "Yes" -- Returns "Yes" meaning that the exploit is supported. (Not used, just for refrence)
    end
end

local Find_Required = API_Check()

if Find_Required == "No" then
    game:GetService("StarterGui"):SetCore("SendNotification",{
        Title = "Ubicast Developer";
        Text = "Tracer script could not be loaded because your exploit is unsupported.";
        Duration = math.huge;
        Button1 = "OK"
    })

    return -- Stops script execution.
end

--// Local variables

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Camera = game:GetService("Workspace").CurrentCamera
local UserInputService = game:GetService("UserInputService")
local TestService = game:GetService("TestService")

--// Global variables

_G.SendNotifications = true   -- If set to true then the script would notify you frequently on any changes applied and when loaded / errored. (If a game can detect this, it is recommended to set it to false)
_G.DefaultSettings = false   -- If set to true then the tracer script would run with default settings regardless of any changes you made.

_G.TeamCheck = false   -- If set to true then the script would create tracers only for the enemy team members.
_G.VisibleWhenNotInSight = false   -- If set to true then the tracers will be visible even if the player being traced is not visible on your screen. (NOT RECOMMENDED, VERY GLITCHY)

--[!]-- ONLY ONE OF THESE VALUES SHOULD BE SET TO TRUE TO NOT ERROR THE SCRIPT --[!]--

_G.FromMouse = false   -- If set to true, the tracers will come from the position of your mouse curson on your screen.
_G.FromCenter = false   -- If set to true, the tracers will come from the center of your screen.
_G.FromBottom = true   -- If set to true, the tracers will come from the bottom of your screen.

_G.TracersVisible = true   -- If set to true then the tracers will be visible and vice versa.
_G.TracerColor = Color3.fromRGB(255, 255, 255)   -- The color that the tracers would appear as.
_G.TracerThickness = 1   -- The thickness of the tracers.
_G.TracerTransparency = 1   -- The transparency of the tracers.

_G.ModeSkipKey = Enum.KeyCode.E   -- The key that changes between modes that indicate where will the tracers come from.
_G.DisableKey = Enum.KeyCode.Q   -- The key that disables / enables the tracers.

--// The main part of the script wrapped in a function waiting to get called.

local function CreateTracers()
    for _, v in pairs(Players:GetPlayers()) do -- Goes through all of the players 1 by 1 that are currently playing the game.
        if v.Name ~= game.Players.LocalPlayer.Name and workspace[v.Name] ~= nil and workspace[v.Name].HumanoidRootPart ~= nil then -- If the script finds the player's character and the character is not your character then it continues.
            local Vector, OnScreen = Camera:WorldToViewportPoint(workspace[v.Name].HumanoidRootPart.Position) -- Used to calculate where the person being traced is on your screen. (Vector)
            
            --// Creates the tracer / creates a line that will be used to trace a player.

            local TracerLine = Drawing.new("Line")
            TracerLine.Visible = true
            TracerLine.Thickness = _G.TracerThickness
            TracerLine.Transparency = _G.TracerTransparency
            TracerLine.Color = _G.TracerColor
    
            RunService.RenderStepped:Connect(function() -- Executes after every frame that your computer rendered. (This depends on your FPS - Frames Per Second)
                if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                    local Vector, OnScreen = Camera:WorldToViewportPoint(workspace[v.Name].HumanoidRootPart.Position)
                    
                    if _G.TeamCheck == true then -- Checks if the global variable TeamCheck is set to true.
                        if Players[v.Name].Team ~= Players.LocalPlayer.Team then -- If the player isn't on your team then it continues forward

                            -- // Checks where the tracer is suppose to come from.

                            if _G.FromMouse == true and _G.FromCenter == false and _G.FromBottom == false then
                                TracerLine.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
                            elseif _G.FromMouse == false and _G.FromCenter == true and _G.FromBottom == false then
                                TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                            elseif _G.FromMouse == false and _G.FromCenter == false and _G.FromBottom == true then
                                TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                            end
            
                            --// Checks if the player can be seen / found on your screen.

                            if OnScreen == true and _G.TracersVisible == true then
                                TracerLine.To = Vector2.new(Vector.X, Vector.Y)
                                TracerLine.Visible = true
                            elseif _G.TracersVisible == false or _G.VisibleWhenNotInSight == false and OnScreen == false then
                                TracerLine.Visible = false
                            end
                        end
                    elseif _G.TeamCheck == false then -- If the global variable TeamCheck is set to false then it continues forward.
                    
                        -- // Checks where the tracer is suppose to come from.

                        if _G.FromMouse == true and _G.FromCenter == false and _G.FromBottom == false then
                            TracerLine.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
                        elseif _G.FromMouse == false and _G.FromCenter == true and _G.FromBottom == false then
                            TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                        elseif _G.FromMouse == false and _G.FromCenter == false and _G.FromBottom == true then
                            TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                        end
        
                        --// Checks if the player can be seen / found on your screen.

                        if OnScreen == true and _G.TracersVisible == true then
                            TracerLine.To = Vector2.new(Vector.X, Vector.Y)
                            TracerLine.Visible = true
                        elseif _G.TracersVisible == false or _G.VisibleWhenNotInSight == false and OnScreen == false then
                            TracerLine.Visible = false
                        end 
                    end
                end
            end)
    
            --// When a player joins the game, we need to create a new tracer.

            Players.PlayerAdded:Connect(function(Player) -- Executes when a player joins the game.
                Players[Player.Name].CharacterAdded:Connect(function() -- Executes once the player's character is created and added to Workspace.
                    repeat wait() until workspace:FindFirstChild(Player.Name).HumanoidRootPart ~= nil -- Stops the code until the character's HumanoidRootPart is fully loaded / there.
        
                    local Vector, OnScreen = Camera:WorldToViewportPoint(workspace[Player.Name].HumanoidRootPart.Position)
                    local TracerLine = Drawing.new("Line") -- Creates the tracer line.
                    TracerLine.Visible = true -- Determines whether or not the tracer line would be visible.
                    TracerLine.Thickness = _G.TracerThickness -- The tracer line's thickness.
                    TracerLine.Transparency = _G.TracerTransparency -- The tracer line's transparency.
                    TracerLine.Color = _G.TracerColor -- The tracer line's color.
            
                    RunService.RenderStepped:Connect(function() -- Executes after every frame that your computer rendered. (This depends on your FPS - Frames Per Second)
                        if workspace:FindFirstChild(Player.Name) ~= nil and workspace[Player.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                            local Vector, OnScreen = Camera:WorldToViewportPoint(workspace[Player.Name].HumanoidRootPart.Position)
                            
                            if _G.TeamCheck == true then -- Checks if the global variable TeamCheck is set to true.
                                if Players[Player.Name].Team ~= Players.LocalPlayer.Team then -- If the player isn't on your team then it continues forward
        
                                    -- // Checks where the tracer is suppose to come from.
        
                                    if _G.FromMouse == true and _G.FromCenter == false and _G.FromBottom == false then
                                        TracerLine.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
                                    elseif _G.FromMouse == false and _G.FromCenter == true and _G.FromBottom == false then
                                        TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                                    elseif _G.FromMouse == false and _G.FromCenter == false and _G.FromBottom == true then
                                        TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                                    end
                    
                                    --// Checks if the player can be seen / found on your screen.
        
                                    if OnScreen == true and _G.TracersVisible == true then
                                        TracerLine.To = Vector2.new(Vector.X, Vector.Y)
                                        TracerLine.Visible = true
                                    elseif _G.TracersVisible == false or _G.VisibleWhenNotInSight == false and OnScreen == false then
                                        TracerLine.Visible = false
                                    end
                                end
                            elseif _G.TeamCheck == false then -- If the global variable TeamCheck is set to false then it continues forward.
                            
                                -- // Checks where the tracer is suppose to come from.
        
                                if _G.FromMouse == true and _G.FromCenter == false and _G.FromBottom == false then
                                    TracerLine.From = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
                                elseif _G.FromMouse == false and _G.FromCenter == true and _G.FromBottom == false then
                                    TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                                elseif _G.FromMouse == false and _G.FromCenter == false and _G.FromBottom == true then
                                    TracerLine.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                                end
                
                                --// Checks if the player can be seen / found on your screen.
        
                                if OnScreen == true and _G.TracersVisible == true then
                                    TracerLine.To = Vector2.new(Vector.X, Vector.Y)
                                    TracerLine.Visible = true
                                elseif _G.TracersVisible == false or _G.VisibleWhenNotInSight == false and OnScreen == false then
                                    TracerLine.Visible = false
                                end 
                            end
                        end
                    end)
                end)
            end)

            --// When a player leaves the game and its character gets removed, we need to remove the tracer assigned to the player so that it doesn't stay there and annoy you.

            Players.PlayerRemoving:Connect(function(Player)
                 TracerLine.Visible = false
            end)
        end
    end
end

--// Checks for if you pressed one of the keys that play a role in the script - if so, then the script activates.

UserInputService.InputBegan:Connect(function(Input)
    if Input.KeyCode == _G.ModeSkipKey then -- Checks if the key that you pressed was the key that was assigned to the global variable ModeSkipKey.
        if _G.FromMouse == true and _G.FromCenter == false and _G.FromBottom == false and _G.TracersVisible == true then
            _G.FromCenter = false
            _G.FromBottom = true
            _G.FromMouse = false

            if _G.SendNotifications == true then
                game:GetService("StarterGui"):SetCore("SendNotification",{
                    Title = "Ubicast Developer";
                    Text = "Tracers will be now coming from the bottom of your screen (Mode 1)";
                    Duration = 5;
                })
            end
        elseif _G.FromMouse == false and _G.FromCenter == false and _G.FromBottom == true and _G.TracersVisible == true then
            _G.FromCenter = true
            _G.FromBottom = false
            _G.FromMouse = false

            if _G.SendNotifications == true then
                game:GetService("StarterGui"):SetCore("SendNotification",{
                    Title = "Ubicast Developer";
                    Text = "Tracers will be now coming from the center of your screen (Mode 2)";
                    Duration = 5;
                })
            end
        elseif _G.FromMouse == false and _G.FromCenter == true and _G.FromBottom == false and _G.TracersVisible == true then
            _G.FromCenter = false
            _G.FromBottom = false
            _G.FromMouse = true

            if _G.SendNotifications == true then
                game:GetService("StarterGui"):SetCore("SendNotification",{
                    Title = "Ubicast Developer";
                    Text = "Tracers will be now coming from the position of your mouse cursor on your screen (Mode 3)";
                    Duration = 5;
                })
            end
        end
    elseif Input.KeyCode == _G.DisableKey then -- Otherwise if the key that you pressed wasn't ModeSkipKey and it was the key that was assigned to the global variable DisableKey then it executes the code wrapped below.
        _G.TracersVisible = not _G.TracersVisible -- Changes the global variable TracersVisible's value to the opposite of what it was.
        
        if _G.SendNotifications == true then
            game:GetService("StarterGui"):SetCore("SendNotification",{
                Title = "Ubicast Developer";
                Text = "The tracers' visibility is now set to "..tostring(_G.TracersVisible)..".";
                Duration = 5;
            })
        end
    end
end)

--// Checks if the global variable DefaultSettings is set to true, and if it is then it applies the default value to all of the settings.

if _G.DefaultSettings == true then
    _G.TeamCheck = false
    _G.VisibleWhenNotInSight = false
    _G.FromMouse = false
    _G.FromCenter = false
    _G.FromBottom = true
    _G.TracersVisible = true
    _G.TracerColor = Color3.fromRGB(40, 90, 255)
    _G.TracerThickness = 1
    _G.TracerTransparency = 1
    _G.ModeSkipKey = Enum.KeyCode.E
    _G.DisableKey = Enum.KeyCode.Q
end

--// function wrapped in a protective call (pcall) so that we can know the state of the script executed.

local Success, Errored = pcall(function()
    CreateTracers() -- Calls the function CreateTracers which creates the tracers.
end)

--// Informs the user that the script has loaded with no errors right after the script executes.

if Success and not Errored then -- If the script's execution was successfull then we notify the user that it didn't error.
    if _G.SendNotifications == true then
        game:GetService("StarterGui"):SetCore("SendNotification",{
            Title = "Ubicast Developer";
            Text = "Tracer script has successfully loaded.";
            Duration = 5;
        })
    end
elseif Errored and not Success then -- And if the script's execution was not successfull and errored then we notify the user that it errored.
    if _G.SendNotifications == true then
        game:GetService("StarterGui"):SetCore("SendNotification",{
            Title = "Ubicast Developer";
            Text = "Tracer script has errored while loading, please check the developer console! (F9)";
            Duration = 5;
        })
    end
    TestService:Message("The tracer script has errored, please notify Ubicast with the following information :")
    warn(Errored) -- If the script errored we want to know what was the error.
    print("!! IF THE ERROR IS A FALSE POSITIVE (says that a player cannot be found) THEN DO NOT BOTHER !!")
end

--<========================================================================================================================>--
